#version 330 core

in vec3 normalRes;// the input variable from the vertex shader (same name and same type)  
// add input fragPos

// Output data
out vec4 fragColor;

uniform vec3 lightColor;

void main()
{
	vec4 coral = vec4(1.0f, 0.5f, 0.31f, 1);
	fragColor = vec4(lightColor,1) * coral;

	float ka = 0.1;
	vec3 ambient = ka * lightColor;

	vec3 norm = normalize(normalRes);
	vec3 lightDire = normalize(lightPos - fragPos);
	float kd = 1;
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse kd * diff * lightColor;
	
	float ks = 0.5;
	vec3 viewDir = normalize(viewPos - lightPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = ks * spec * lightColor

	vec3 sum = ambient + diffuse + specular;
	fragColor = vec4(sum, 1) * coral;
}